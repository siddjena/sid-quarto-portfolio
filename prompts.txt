# Complete Guide: Python + Quarto Setup with Matplotlib Visualization

## ðŸ¤– AI EXECUTION INSTRUCTIONS
**For AI Assistants:** This file contains complete instructions to create a Quarto portfolio project from scratch. Execute ALL steps in order:
1. Read this entire file
2. Follow each step sequentially 
3. Create the complete project structure
4. Install all required software and packages
5. Generate the index.qmd file with the provided template
6. Execute quarto render to produce the final output
7. Verify successful completion

**User Instructions:** Simply reference this file to any AI assistant with: "Follow the instructions in prompts.txt and create the complete project from scratch"

---

## Step 1: Install Python
1. Download Python from https://www.python.org/downloads/
2. During installation, check "Add Python to PATH"
3. Verify installation: Open command prompt and run `python --version`
4. Install pip if not included: `python -m ensurepip --upgrade`

## Step 2: Install Quarto
1. Visit https://quarto.org/docs/get-started/
2. Download Quarto installer for your OS (Windows/Mac/Linux)
3. Install Quarto following the installation wizard
4. Verify installation: Open command prompt and run `quarto --version`
5. Install Quarto extensions: `quarto install extension quarto-ext/plotly`

## Step 3: Create Project Directory
1. Create a new folder for your project: `mkdir my-quarto-project`
2. Navigate to the folder: `cd my-quarto-project`
3. Initialize Quarto project: `quarto create project my-project`

## Step 4: Create index.qmd File
Create a file named `index.qmd` with the following content:

```yaml
---
title: "Data Science Portfolio"
subtitle: "Interactive Analysis with Matplotlib"
author: "Your Name"
date: today
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    code-fold: true
    code-tools: true
    embed-resources: true
    fig-width: 10
    fig-height: 6
execute:
  echo: true
  warning: false
  message: false
---

# Welcome to My Data Science Portfolio

This document demonstrates data visualization capabilities using Python and Matplotlib within Quarto.

## Sample Analysis: Stock Market Trends

Let's create some sample visualizations using simulated data:

```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

# Set random seed for reproducibility
np.random.seed(42)

# Generate sample data
dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D')
n_days = len(dates)

# Simulate stock prices with trend and volatility
base_price = 100
trend = np.linspace(0, 20, n_days)  # Upward trend
volatility = np.random.normal(0, 2, n_days)  # Random fluctuations
prices = base_price + trend + volatility

# Create DataFrame
stock_data = pd.DataFrame({
    'Date': dates,
    'Price': prices,
    'Volume': np.random.randint(1000000, 5000000, n_days)
})

# Calculate moving averages
stock_data['MA_20'] = stock_data['Price'].rolling(window=20).mean()
stock_data['MA_50'] = stock_data['Price'].rolling(window=50).mean()

print(f"Data shape: {stock_data.shape}")
print(f"Price range: ${stock_data['Price'].min():.2f} - ${stock_data['Price'].max():.2f}")
```

```{python}
# Create the main visualization
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))

# Plot 1: Stock Price with Moving Averages
ax1.plot(stock_data['Date'], stock_data['Price'], 
         linewidth=1.5, alpha=0.8, label='Stock Price', color='#2E86AB')
ax1.plot(stock_data['Date'], stock_data['MA_20'], 
         linewidth=2, label='20-day Moving Average', color='#A23B72')
ax1.plot(stock_data['Date'], stock_data['MA_50'], 
         linewidth=2, label='50-day Moving Average', color='#F18F01')

ax1.set_title('Stock Price Analysis with Moving Averages', fontsize=16, fontweight='bold')
ax1.set_ylabel('Price ($)', fontsize=12)
ax1.legend(loc='upper left')
ax1.grid(True, alpha=0.3)
ax1.set_xlim(stock_data['Date'].min(), stock_data['Date'].max())

# Plot 2: Trading Volume
colors = ['#E74C3C' if x < stock_data['Volume'].mean() else '#27AE60' 
          for x in stock_data['Volume']]
ax2.bar(stock_data['Date'], stock_data['Volume'], 
        color=colors, alpha=0.7, width=1)

ax2.set_title('Trading Volume Over Time', fontsize=16, fontweight='bold')
ax2.set_xlabel('Date', fontsize=12)
ax2.set_ylabel('Volume', fontsize=12)
ax2.grid(True, alpha=0.3)
ax2.set_xlim(stock_data['Date'].min(), stock_data['Date'].max())

# Format x-axis dates
import matplotlib.dates as mdates
for ax in [ax1, ax2]:
    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
    ax.tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()
```

## Additional Visualizations

```{python}
# Create a correlation heatmap
fig, ax = plt.subplots(figsize=(8, 6))

# Calculate correlation matrix
corr_data = stock_data[['Price', 'Volume', 'MA_20', 'MA_50']].corr()

# Create heatmap
im = ax.imshow(corr_data, cmap='coolwarm', aspect='auto', vmin=-1, vmax=1)

# Add text annotations
for i in range(len(corr_data.columns)):
    for j in range(len(corr_data.columns)):
        text = ax.text(j, i, f'{corr_data.iloc[i, j]:.2f}',
                       ha="center", va="center", color="black", fontweight='bold')

# Set labels
ax.set_xticks(range(len(corr_data.columns)))
ax.set_yticks(range(len(corr_data.columns)))
ax.set_xticklabels(corr_data.columns, rotation=45)
ax.set_yticklabels(corr_data.columns)

ax.set_title('Correlation Matrix of Stock Metrics', fontsize=14, fontweight='bold')
plt.colorbar(im, ax=ax, shrink=0.8)
plt.tight_layout()
plt.show()
```

```{python}
# Create a distribution plot
fig, ax = plt.subplots(figsize=(10, 6))

# Plot histogram of prices
ax.hist(stock_data['Price'], bins=50, alpha=0.7, color='skyblue', edgecolor='black')

# Add statistics
mean_price = stock_data['Price'].mean()
median_price = stock_data['Price'].median()
std_price = stock_data['Price'].std()

ax.axvline(mean_price, color='red', linestyle='--', linewidth=2, label=f'Mean: ${mean_price:.2f}')
ax.axvline(median_price, color='green', linestyle='--', linewidth=2, label=f'Median: ${median_price:.2f}')

ax.set_title('Distribution of Stock Prices', fontsize=14, fontweight='bold')
ax.set_xlabel('Price ($)', fontsize=12)
ax.set_ylabel('Frequency', fontsize=12)
ax.legend()
ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
```

## Key Insights

```{python}
# Calculate some basic statistics
price_stats = {
    'Starting Price': f"${stock_data['Price'].iloc[0]:.2f}",
    'Ending Price': f"${stock_data['Price'].iloc[-1]:.2f}",
    'Total Return': f"{(stock_data['Price'].iloc[-1] / stock_data['Price'].iloc[0] - 1) * 100:.1f}%",
    'Average Daily Volume': f"{stock_data['Volume'].mean():,.0f}",
    'Price Volatility (Std Dev)': f"${stock_data['Price'].std():.2f}",
    'Maximum Price': f"${stock_data['Price'].max():.2f}",
    'Minimum Price': f"${stock_data['Price'].min():.2f}"
}

print("ðŸ“Š Stock Performance Summary:")
print("=" * 50)
for key, value in price_stats.items():
    print(f"{key:<30}: {value}")
```

## Technical Skills Demonstrated

- **Data Generation**: Creating realistic time series data
- **Statistical Analysis**: Moving averages, correlation analysis
- **Visualization**: Line plots, bar charts, heatmaps, histograms
- **Python Libraries**: Matplotlib, Pandas, NumPy
- **Documentation**: Quarto integration with code execution

---

*This portfolio demonstrates the power of combining Python's data science libraries with Quarto's publishing capabilities.*
```

## Step 5: Install Required Python Packages
1. Install matplotlib: `pip install matplotlib`
2. Install pandas: `pip install pandas`
3. Install numpy: `pip install numpy`
4. Optional - install additional packages: `pip install seaborn plotly scikit-learn`

## Step 6: Render the Quarto Document
1. Navigate to your project directory: `cd my-quarto-project`
2. Render the document: `quarto render index.qmd`
3. Open the generated HTML file: `quarto preview index.html`

## Alternative Commands:
- Preview while editing: `quarto preview index.qmd` (auto-refresh on changes)
- Render to PDF: `quarto render index.qmd --to pdf`
- Render to Word: `quarto render index.qmd --to docx`

## Troubleshooting:
- If matplotlib plots don't show: Ensure `plt.show()` is called in code chunks
- If packages missing: Run `pip install <package-name>` for each required package
- If Quarto not found: Add Quarto to your system PATH or reinstall
- For permission errors: Run command prompt as administrator (Windows)

## Expected Output:
After successful execution, you'll have:
- A rendered HTML file with interactive plots
- All matplotlib visualizations embedded in the document
- A professional-looking data science portfolio
- Code that can be executed and modified

## Next Steps:
- Customize the plots and data
- Add more analysis sections
- Deploy to GitHub Pages or Netlify
- Share your portfolio with the community
